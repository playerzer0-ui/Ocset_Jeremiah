@{
    ViewData["Title"] = "Cart";
}

<main class="center-div bg-orders">
    <div class="card-div">
        <h1>Cart</h1>
        <p>@ViewData["UserId"]</p>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Product Name
                    </th>
                    <th>
                        Quantity
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody id="cart-items">
                <!-- Cart items will be dynamically added here -->
            </tbody>
        </table>
        <button id="place-order-btn" class="btn btn-primary">Place Order</button>
    </div>
</main>

<script>
    // Retrieve cart data from localStorage
    var cartData = localStorage.getItem('cart');
    if (cartData) {
        var cart = JSON.parse(cartData);

        // Get the tbody element where cart items will be displayed
        var cartItemsTbody = document.getElementById('cart-items');

        // Loop through each item in the cart
        Object.keys(cart).forEach(function (productId) {
            var item = cart[productId];

            // Create a new table row
            var row = document.createElement('tr');

            // Create table cells for product name, quantity, and action
            var productNameCell = document.createElement('td');
            productNameCell.textContent = item.productName; // You need to fetch product name based on productId
            var quantityCell = document.createElement('td');
            quantityCell.textContent = item.quantity;
            var actionCell = document.createElement('td');
            var removeButton = document.createElement('button');
            removeButton.textContent = 'Remove Item';
            removeButton.classList.add('btn', 'btn-danger');
            removeButton.addEventListener('click', function () {
                // Implement logic to remove item from cart
                // You can use productId to remove the item from the cart
                // After removing, you need to update the displayed cart items
            });
            actionCell.appendChild(removeButton);

            // Append table cells to the table row
            row.appendChild(productNameCell);
            row.appendChild(quantityCell);
            row.appendChild(actionCell);

            // Append the table row to the cart items tbody
            cartItemsTbody.appendChild(row);
        });
    }

    // Add event listener for the "Place Order" button
    document.getElementById('place-order-btn').addEventListener('click', function () {
        var orders = [];

        // Loop through each item in the cart
        Object.keys(cart).forEach(function (productId) {
            var item = cart[productId];

            // Create an order object with necessary properties
            var order = {
                OrderDate: new Date().toISOString(),
                Quantity: item.quantity,
                CustomerId: "@ViewData["UserId"]", // Retrieve customer ID from ViewData
                ProductId: productId
            };

            // Add the order object to the orders array
            orders.push(order);
        });

        // Create a hidden form to submit the orders
        var form = document.createElement('form');
        form.setAttribute('method', 'post');
        form.setAttribute('action', '/Orders/CreateMultiple'); // Set the action to your controller method
        form.setAttribute('style', 'display: none;');

        // Add hidden fields for each order item
        orders.forEach(function (order, index) {
            Object.keys(order).forEach(function (key) {
                var input = document.createElement('input');
                input.setAttribute('type', 'hidden');
                input.setAttribute('name', `orders[${index}].${key}`);
                input.setAttribute('value', order[key]);
                form.appendChild(input);
            });
        });

        // Append the form to the document body and submit it
        document.body.appendChild(form);
        form.submit();
    });
</script>
